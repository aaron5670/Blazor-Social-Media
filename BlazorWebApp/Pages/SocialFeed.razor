@page "/socialfeed"
@inject NavigationManager navigationManager;
@using Microsoft.AspNetCore.SignalR.Client;
@using SocialMediaApplication.Data
@using Entities
@using SocialMediaApplication.DTO
@inject UserService UserService

<div class="flex justify-center w-100 h-screen px-4 text-gray-700">
    <div class="flex w-full">
        <div class="flex flex-col w-64 py-4 pr-3">
            <a class="px-3 py-2 mt-2 text-lg font-medium rounded-sm hover:bg-gray-300" href="#">Home</a>
            @if (_isChatting)
            {
                <a class="flex px-3 py-2 mt-2 mt-auto text-lg rounded-sm font-medium hover:bg-gray-200" href="#">
                    <span class="flex-shrink-0 w-10 h-10 bg-gray-400 rounded-full"></span>
                    <div class="flex flex-col ml-2">
                        <span class="mt-1 text-sm leading-none">Logged in as:</span>
                        <span class="mt-1 text-xs font-weight-bold leading-none">@_username</span>
                    </div>
                </a>
                <div class="px-3 py-2 mt-2 text-lg font-medium rounded-sm hover:bg-gray-300 cursor-pointer"
                     @onclick="@DisconnectAsync">
                    Logout
                </div>
            }
        </div>
        <div class="flex flex-col flex-grow border-l border-r border-gray-300">
            <div class="flex justify-between flex-shrink-0 px-8 py-4 border-b border-gray-300">
                <h1 class="text-xl font-semibold">Check hier <strong>nu</strong> de laatste posts!!</h1>
            </div>
            <div class="flex-grow h-0 overflow-auto">
                @if (!_isChatting)
                {
                    <div class="flex justify-between align-items-center flex-shrink-0 px-8 py-4 border-b border-gray-300">
                        <h1 class="text-xl font-semibold">Fill in username</h1>
                        <input
                            type="text"
                            @bind="@_username"
                            class="p-3 bg-transparent border border-gray-500 rounded-sm"
                            name="_username"
                            id="_username"
                            placeholder="Enter username"/>
                        <div class="flex justify-between mt-2">
                            <button
                                @onclick="@Chat"
                                 class="flex items-center h-8 px-3 text-xs rounded-sm bg-gray-300 hover:bg-gray-400">
                                Have fun posting!
                            </button>
                        </div>
                        @if (_message != null)
                        {
                            <div class="invalid-feedback">@_message</div>
                            <small id="emailHelp" class="form-text text-muted">@_message</small>
                        }
                    </div>
                }
                else
                {
                    <div class="flex w-full p-8 border-b-4 border-gray-300">
                        <img src="https://icotar.com/initials/@_username"
                             class="flex-shrink-0 w-12 h-12 bg-gray-400 rounded-full"/>
                        <div class="flex flex-col flex-grow ml-4">
                            <textarea 
                                @bind="@_newMessage"
                                class="p-3 bg-transparent border border-gray-500 rounded-sm" 
                                name="" 
                                id=""  
                                rows="3" 
                                placeholder="What's happening?"/>
                            <div class="flex justify-between mt-2">
                                <button class="flex items-center h-8 px-3 text-xs rounded-sm hover:bg-gray-200">Attach</button>
                                <button
                                    @onclick="@(() => SendAsync(_newMessage))"
                                     class="flex items-center h-8 px-3 text-xs rounded-sm bg-gray-300 hover:bg-gray-400">
                                    Post
                                </button>
                            </div>
                        </div>
                    </div>
                    @if (posts?.Count > 0)
                    {
                        @foreach (var item in posts)
                        {
                            <div class="flex w-full p-8 border-b border-gray-300">
                                <img src="https://icotar.com/initials/@item.Username"
                                     class="flex-shrink-0 w-12 h-12 bg-gray-400 rounded-full"/>
                                <div class="flex flex-col flex-grow ml-4">
                                    <div class="flex">
                                        <span class="font-semibold">@item.Username</span>
                                    </div>
                                    <p class="mt-1">@item.Content</p>
                                    <div class="flex mt-2">
                                        <button class="text-sm font-semibold"
                                                @onclick="@(() => LikeAsync(item.PostId))">Like</button>
                                        <button class="ml-2 text-sm font-semibold">Reply</button>
                                        <button class="ml-2 text-sm font-semibold">Share</button>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                }
            </div>
        </div>
        <div class="flex flex-col flex-shrink-0 w-1/4 py-4 pl-4">
            <input class="flex items-center h-8 px-2 border border-gray-500 rounded-sm" type="search" Placeholder="Search…">
            <div>
                <h3 class="mt-6 font-semibold">Trending</h3>
                @if (posts?.Count > 0 && _isChatting)
                {
                    @foreach (var post in posts)
                    {
                        <div class="flex w-full p-8 border-b border-gray-300">
                            <span class="flex-shrink-0 w-12 h-12 bg-gray-400 rounded-full"></span>
                            <div class="flex flex-col flex-grow ml-4">
                                <div class="flex justify-content-between">
                                    <span class="font-semibold">@post.Username</span>
                                    <span><strong>@post.Likes </strong> likes</span>
                                </div>
                                <p class="mt-1">@post.Content</p>
                                <div class="flex mt-2">
                                    <button class="text-sm font-semibold"
                                            @onclick="@(() => LikeAsync(post.PostId))"
                                            >Like</button>
                                    <button class="ml-2 text-sm font-semibold">Share</button>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    private bool _isChatting = false;
    private string _username = string.Empty;
    private string _message;
    private string _newMessage;
    private string _hubUrl;
    private HubConnection _hubConnection;
    

    ICollection<User> users;
    List<PostDTO> posts;

    string ErrorText { get; set; } = string.Empty;

    public async Task Chat()
    {
        if (string.IsNullOrWhiteSpace(_username))
        {
            _message = "Please enter a name";
            return;
        }

        try
        {
            await LoginUser();
            _isChatting = true;

            string baseUrl = navigationManager.BaseUri;

            _hubUrl = baseUrl.TrimEnd('/') + BlazorChatSampleHub.HubUrl;
            _hubConnection = new HubConnectionBuilder().WithUrl(_hubUrl).Build();
            _hubConnection.On<string, string, string>("Broadcast", BroadcastMessage);
            await _hubConnection.StartAsync();

        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }
    }

    private async Task BroadcastMessage(string name, string message, string postId)
    {
        posts.Insert(0, new PostDTO {Username = name, Content = message, PostId = new Guid(postId)});
        StateHasChanged();
    }

    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            _isChatting = false;
        }
    }

    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            var post = await UserService.AddPost(_username, message);
            await _hubConnection.SendAsync("Broadcast", _username, message, post.PostId.ToString());
            _newMessage = string.Empty;
        }
    }

    private async Task LikeAsync(Guid postId)
    {
        foreach (var post in posts.Where(post => post.PostId == postId))
        {
            var isLiked = await UserService.AddedLike(post.PostId, post.Username, _username);

            if (!isLiked) continue;
            post.Likes += 1;
            StateHasChanged();
        }
    }

    private async Task LoginUser()
    {
        ErrorText = string.Empty;
        await UserService.LoginUser(_username);
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() => posts = UserService.GetAllPosts());
        Console.WriteLine(posts);
    }
}